/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface PermalinkInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_PLATFORM_FEE"
      | "addAdmin"
      | "adminAddressList"
      | "adminAddresses"
      | "approve"
      | "approveAddresses"
      | "artistProfiles"
      | "artistSeries"
      | "artworkSeries"
      | "balanceOf"
      | "collectorTokens"
      | "createArtworkSeries"
      | "getAdminAddresses"
      | "getApproved"
      | "getArtistProfile"
      | "getArtistSeries"
      | "getArtworkImageData"
      | "getArtworkSeries"
      | "getCollectorTokens"
      | "getCurrentSeriesId"
      | "getCurrentTokenId"
      | "getIndividualArtwork"
      | "getInterestedAddresses"
      | "getSecondaryFees"
      | "getSeriesTokens"
      | "getWhitelistedAddresses"
      | "individualArtworks"
      | "interestedAddressList"
      | "interestedAddresses"
      | "isAdmin"
      | "isApprovedForAll"
      | "isInterested"
      | "isWhitelistEnabled"
      | "isWhitelisted"
      | "name"
      | "owner"
      | "ownerOf"
      | "pause"
      | "paused"
      | "platformFeePercentage"
      | "purchaseFromSeries"
      | "registerInterest"
      | "removeAdmin"
      | "removeFromWhitelist"
      | "renounceOwnership"
      | "royaltyInfo"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "secondaryArtistRoyalty"
      | "secondaryPlatformFee"
      | "seriesTokens"
      | "setApprovalForAll"
      | "setPlatformFee"
      | "setSecondaryFees"
      | "setTreasuryAddress"
      | "supportsInterface"
      | "symbol"
      | "toggleSeriesStatus"
      | "toggleWhitelist"
      | "tokenByIndex"
      | "tokenOfOwnerByIndex"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "transferOwnership"
      | "treasuryAddress"
      | "unpause"
      | "updateArtistProfile"
      | "updateSeriesPrice"
      | "whitelistEnabled"
      | "whitelistedAddressList"
      | "whitelistedAddresses"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddressRegisteredInterest"
      | "AddressRemovedFromWhitelist"
      | "AddressWhitelisted"
      | "AdminAdded"
      | "AdminRemoved"
      | "Approval"
      | "ApprovalForAll"
      | "ArtistProfileUpdated"
      | "ArtworkMinted"
      | "ArtworkSeriesCreated"
      | "OwnershipTransferred"
      | "Paused"
      | "PlatformFeeUpdated"
      | "Transfer"
      | "Unpaused"
      | "WhitelistToggled"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_PLATFORM_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "adminAddressList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminAddresses",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveAddresses",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "artistProfiles",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "artistSeries",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "artworkSeries",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collectorTokens",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createArtworkSeries",
    values: [string, string, BytesLike, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdminAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getArtistProfile",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getArtistSeries",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getArtworkImageData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getArtworkSeries",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectorTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentSeriesId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIndividualArtwork",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInterestedAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSecondaryFees",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSeriesTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWhitelistedAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "individualArtworks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "interestedAddressList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "interestedAddresses",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isInterested",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseFromSeries",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerInterest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromWhitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "secondaryArtistRoyalty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "secondaryPlatformFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seriesTokens",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSecondaryFees",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toggleSeriesStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateArtistProfile",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSeriesPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedAddressList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedAddresses",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_PLATFORM_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adminAddressList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "artistProfiles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "artistSeries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "artworkSeries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectorTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createArtworkSeries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdminAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArtistProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArtistSeries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArtworkImageData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArtworkSeries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectorTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentSeriesId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIndividualArtwork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInterestedAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSecondaryFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSeriesTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhitelistedAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "individualArtworks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestedAddressList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestedAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInterested",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseFromSeries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondaryArtistRoyalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondaryPlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seriesTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSecondaryFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleSeriesStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateArtistProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSeriesPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedAddressList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedAddresses",
    data: BytesLike
  ): Result;
}

export namespace AddressRegisteredInterestEvent {
  export type InputTuple = [addr: AddressLike];
  export type OutputTuple = [addr: string];
  export interface OutputObject {
    addr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddressRemovedFromWhitelistEvent {
  export type InputTuple = [addr: AddressLike];
  export type OutputTuple = [addr: string];
  export interface OutputObject {
    addr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddressWhitelistedEvent {
  export type InputTuple = [addr: AddressLike];
  export type OutputTuple = [addr: string];
  export interface OutputObject {
    addr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminAddedEvent {
  export type InputTuple = [admin: AddressLike, addedBy: AddressLike];
  export type OutputTuple = [admin: string, addedBy: string];
  export interface OutputObject {
    admin: string;
    addedBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminRemovedEvent {
  export type InputTuple = [admin: AddressLike, removedBy: AddressLike];
  export type OutputTuple = [admin: string, removedBy: string];
  export interface OutputObject {
    admin: string;
    removedBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ArtistProfileUpdatedEvent {
  export type InputTuple = [
    artist: AddressLike,
    name: string,
    bio: string,
    avatarURI: string
  ];
  export type OutputTuple = [
    artist: string,
    name: string,
    bio: string,
    avatarURI: string
  ];
  export interface OutputObject {
    artist: string;
    name: string;
    bio: string;
    avatarURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ArtworkMintedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    seriesId: BigNumberish,
    buyer: AddressLike,
    artist: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    seriesId: bigint,
    buyer: string,
    artist: string,
    price: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    seriesId: bigint;
    buyer: string;
    artist: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ArtworkSeriesCreatedEvent {
  export type InputTuple = [
    seriesId: BigNumberish,
    artist: AddressLike,
    title: string,
    price: BigNumberish,
    maxSupply: BigNumberish,
    imageSize: BigNumberish
  ];
  export type OutputTuple = [
    seriesId: bigint,
    artist: string,
    title: string,
    price: bigint,
    maxSupply: bigint,
    imageSize: bigint
  ];
  export interface OutputObject {
    seriesId: bigint;
    artist: string;
    title: string;
    price: bigint;
    maxSupply: bigint;
    imageSize: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlatformFeeUpdatedEvent {
  export type InputTuple = [oldFee: BigNumberish, newFee: BigNumberish];
  export type OutputTuple = [oldFee: bigint, newFee: bigint];
  export interface OutputObject {
    oldFee: bigint;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WhitelistToggledEvent {
  export type InputTuple = [enabled: boolean, toggledBy: AddressLike];
  export type OutputTuple = [enabled: boolean, toggledBy: string];
  export interface OutputObject {
    enabled: boolean;
    toggledBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Permalink extends BaseContract {
  connect(runner?: ContractRunner | null): Permalink;
  waitForDeployment(): Promise<this>;

  interface: PermalinkInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_PLATFORM_FEE: TypedContractMethod<[], [bigint], "view">;

  addAdmin: TypedContractMethod<[addr: AddressLike], [void], "nonpayable">;

  adminAddressList: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  adminAddresses: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  approveAddresses: TypedContractMethod<
    [addresses: AddressLike[]],
    [void],
    "nonpayable"
  >;

  artistProfiles: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, bigint, bigint, boolean] & {
        name: string;
        bio: string;
        avatarURI: string;
        totalSeriesCreated: bigint;
        totalNFTsCollected: bigint;
        isRegistered: boolean;
      }
    ],
    "view"
  >;

  artistSeries: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  artworkSeries: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint
      ] & {
        seriesId: bigint;
        artist: string;
        title: string;
        description: string;
        imageData: string;
        imageType: string;
        price: bigint;
        maxSupply: bigint;
        minted: bigint;
        isActive: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  collectorTokens: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  createArtworkSeries: TypedContractMethod<
    [
      _title: string,
      _description: string,
      _imageData: BytesLike,
      _imageType: string,
      _price: BigNumberish,
      _maxSupply: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getAdminAddresses: TypedContractMethod<[], [string[]], "view">;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getArtistProfile: TypedContractMethod<
    [artist: AddressLike],
    [
      [string, string, string, bigint, bigint, boolean] & {
        artistName: string;
        bio: string;
        avatarURI: string;
        totalSeriesCreated: bigint;
        totalNFTsCollected: bigint;
        isRegistered: boolean;
      }
    ],
    "view"
  >;

  getArtistSeries: TypedContractMethod<
    [artist: AddressLike],
    [bigint[]],
    "view"
  >;

  getArtworkImageData: TypedContractMethod<
    [tokenId: BigNumberish],
    [[string, string] & { imageData: string; imageType: string }],
    "view"
  >;

  getArtworkSeries: TypedContractMethod<
    [seriesId: BigNumberish],
    [
      [
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint
      ] & {
        artist: string;
        title: string;
        description: string;
        imageType: string;
        imageSize: bigint;
        price: bigint;
        maxSupply: bigint;
        minted: bigint;
        isActive: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  getCollectorTokens: TypedContractMethod<
    [collector: AddressLike],
    [bigint[]],
    "view"
  >;

  getCurrentSeriesId: TypedContractMethod<[], [bigint], "view">;

  getCurrentTokenId: TypedContractMethod<[], [bigint], "view">;

  getIndividualArtwork: TypedContractMethod<
    [tokenId: BigNumberish],
    [
      [bigint, string, string, string, string, bigint, bigint] & {
        seriesId: bigint;
        artist: string;
        title: string;
        description: string;
        imageType: string;
        imageSize: bigint;
        mintedAt: bigint;
      }
    ],
    "view"
  >;

  getInterestedAddresses: TypedContractMethod<[], [string[]], "view">;

  getSecondaryFees: TypedContractMethod<
    [tokenId: BigNumberish, salePrice: BigNumberish],
    [
      [string, bigint, bigint, bigint] & {
        artist: string;
        artistRoyalty: bigint;
        platformFee: bigint;
        totalFees: bigint;
      }
    ],
    "view"
  >;

  getSeriesTokens: TypedContractMethod<
    [seriesId: BigNumberish],
    [bigint[]],
    "view"
  >;

  getWhitelistedAddresses: TypedContractMethod<[], [string[]], "view">;

  individualArtworks: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, bigint] & {
        tokenId: bigint;
        seriesId: bigint;
        artist: string;
        mintedAt: bigint;
      }
    ],
    "view"
  >;

  interestedAddressList: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  interestedAddresses: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  isAdmin: TypedContractMethod<[addr: AddressLike], [boolean], "view">;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isInterested: TypedContractMethod<[addr: AddressLike], [boolean], "view">;

  isWhitelistEnabled: TypedContractMethod<[], [boolean], "view">;

  isWhitelisted: TypedContractMethod<[addr: AddressLike], [boolean], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  platformFeePercentage: TypedContractMethod<[], [bigint], "view">;

  purchaseFromSeries: TypedContractMethod<
    [seriesId: BigNumberish],
    [bigint],
    "payable"
  >;

  registerInterest: TypedContractMethod<[], [void], "nonpayable">;

  removeAdmin: TypedContractMethod<[addr: AddressLike], [void], "nonpayable">;

  removeFromWhitelist: TypedContractMethod<
    [addr: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  royaltyInfo: TypedContractMethod<
    [tokenId: BigNumberish, salePrice: BigNumberish],
    [[string, bigint] & { receiver: string; royaltyAmount: bigint }],
    "view"
  >;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  secondaryArtistRoyalty: TypedContractMethod<[], [bigint], "view">;

  secondaryPlatformFee: TypedContractMethod<[], [bigint], "view">;

  seriesTokens: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setPlatformFee: TypedContractMethod<
    [_platformFeePercentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSecondaryFees: TypedContractMethod<
    [_platformFee: BigNumberish, _artistRoyalty: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTreasuryAddress: TypedContractMethod<
    [_treasuryAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  toggleSeriesStatus: TypedContractMethod<
    [seriesId: BigNumberish],
    [void],
    "nonpayable"
  >;

  toggleWhitelist: TypedContractMethod<[], [void], "nonpayable">;

  tokenByIndex: TypedContractMethod<[index: BigNumberish], [bigint], "view">;

  tokenOfOwnerByIndex: TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  treasuryAddress: TypedContractMethod<[], [string], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateArtistProfile: TypedContractMethod<
    [_name: string, _bio: string, _avatarURI: string],
    [void],
    "nonpayable"
  >;

  updateSeriesPrice: TypedContractMethod<
    [seriesId: BigNumberish, newPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  whitelistEnabled: TypedContractMethod<[], [boolean], "view">;

  whitelistedAddressList: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  whitelistedAddresses: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_PLATFORM_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addAdmin"
  ): TypedContractMethod<[addr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "adminAddressList"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "adminAddresses"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveAddresses"
  ): TypedContractMethod<[addresses: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "artistProfiles"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, bigint, bigint, boolean] & {
        name: string;
        bio: string;
        avatarURI: string;
        totalSeriesCreated: bigint;
        totalNFTsCollected: bigint;
        isRegistered: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "artistSeries"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "artworkSeries"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint
      ] & {
        seriesId: bigint;
        artist: string;
        title: string;
        description: string;
        imageData: string;
        imageType: string;
        price: bigint;
        maxSupply: bigint;
        minted: bigint;
        isActive: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "collectorTokens"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "createArtworkSeries"
  ): TypedContractMethod<
    [
      _title: string,
      _description: string,
      _imageData: BytesLike,
      _imageType: string,
      _price: BigNumberish,
      _maxSupply: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAdminAddresses"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getArtistProfile"
  ): TypedContractMethod<
    [artist: AddressLike],
    [
      [string, string, string, bigint, bigint, boolean] & {
        artistName: string;
        bio: string;
        avatarURI: string;
        totalSeriesCreated: bigint;
        totalNFTsCollected: bigint;
        isRegistered: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getArtistSeries"
  ): TypedContractMethod<[artist: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getArtworkImageData"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [[string, string] & { imageData: string; imageType: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getArtworkSeries"
  ): TypedContractMethod<
    [seriesId: BigNumberish],
    [
      [
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint
      ] & {
        artist: string;
        title: string;
        description: string;
        imageType: string;
        imageSize: bigint;
        price: bigint;
        maxSupply: bigint;
        minted: bigint;
        isActive: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCollectorTokens"
  ): TypedContractMethod<[collector: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getCurrentSeriesId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentTokenId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getIndividualArtwork"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [
      [bigint, string, string, string, string, bigint, bigint] & {
        seriesId: bigint;
        artist: string;
        title: string;
        description: string;
        imageType: string;
        imageSize: bigint;
        mintedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getInterestedAddresses"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getSecondaryFees"
  ): TypedContractMethod<
    [tokenId: BigNumberish, salePrice: BigNumberish],
    [
      [string, bigint, bigint, bigint] & {
        artist: string;
        artistRoyalty: bigint;
        platformFee: bigint;
        totalFees: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSeriesTokens"
  ): TypedContractMethod<[seriesId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getWhitelistedAddresses"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "individualArtworks"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, bigint] & {
        tokenId: bigint;
        seriesId: bigint;
        artist: string;
        mintedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "interestedAddressList"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "interestedAddresses"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isAdmin"
  ): TypedContractMethod<[addr: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isInterested"
  ): TypedContractMethod<[addr: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isWhitelistEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isWhitelisted"
  ): TypedContractMethod<[addr: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "platformFeePercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "purchaseFromSeries"
  ): TypedContractMethod<[seriesId: BigNumberish], [bigint], "payable">;
  getFunction(
    nameOrSignature: "registerInterest"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeAdmin"
  ): TypedContractMethod<[addr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeFromWhitelist"
  ): TypedContractMethod<[addr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "royaltyInfo"
  ): TypedContractMethod<
    [tokenId: BigNumberish, salePrice: BigNumberish],
    [[string, bigint] & { receiver: string; royaltyAmount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "secondaryArtistRoyalty"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "secondaryPlatformFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "seriesTokens"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPlatformFee"
  ): TypedContractMethod<
    [_platformFeePercentage: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSecondaryFees"
  ): TypedContractMethod<
    [_platformFee: BigNumberish, _artistRoyalty: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTreasuryAddress"
  ): TypedContractMethod<[_treasuryAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "toggleSeriesStatus"
  ): TypedContractMethod<[seriesId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "toggleWhitelist"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tokenByIndex"
  ): TypedContractMethod<[index: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenOfOwnerByIndex"
  ): TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasuryAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateArtistProfile"
  ): TypedContractMethod<
    [_name: string, _bio: string, _avatarURI: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateSeriesPrice"
  ): TypedContractMethod<
    [seriesId: BigNumberish, newPrice: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "whitelistEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "whitelistedAddressList"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "whitelistedAddresses"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getEvent(
    key: "AddressRegisteredInterest"
  ): TypedContractEvent<
    AddressRegisteredInterestEvent.InputTuple,
    AddressRegisteredInterestEvent.OutputTuple,
    AddressRegisteredInterestEvent.OutputObject
  >;
  getEvent(
    key: "AddressRemovedFromWhitelist"
  ): TypedContractEvent<
    AddressRemovedFromWhitelistEvent.InputTuple,
    AddressRemovedFromWhitelistEvent.OutputTuple,
    AddressRemovedFromWhitelistEvent.OutputObject
  >;
  getEvent(
    key: "AddressWhitelisted"
  ): TypedContractEvent<
    AddressWhitelistedEvent.InputTuple,
    AddressWhitelistedEvent.OutputTuple,
    AddressWhitelistedEvent.OutputObject
  >;
  getEvent(
    key: "AdminAdded"
  ): TypedContractEvent<
    AdminAddedEvent.InputTuple,
    AdminAddedEvent.OutputTuple,
    AdminAddedEvent.OutputObject
  >;
  getEvent(
    key: "AdminRemoved"
  ): TypedContractEvent<
    AdminRemovedEvent.InputTuple,
    AdminRemovedEvent.OutputTuple,
    AdminRemovedEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "ArtistProfileUpdated"
  ): TypedContractEvent<
    ArtistProfileUpdatedEvent.InputTuple,
    ArtistProfileUpdatedEvent.OutputTuple,
    ArtistProfileUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ArtworkMinted"
  ): TypedContractEvent<
    ArtworkMintedEvent.InputTuple,
    ArtworkMintedEvent.OutputTuple,
    ArtworkMintedEvent.OutputObject
  >;
  getEvent(
    key: "ArtworkSeriesCreated"
  ): TypedContractEvent<
    ArtworkSeriesCreatedEvent.InputTuple,
    ArtworkSeriesCreatedEvent.OutputTuple,
    ArtworkSeriesCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PlatformFeeUpdated"
  ): TypedContractEvent<
    PlatformFeeUpdatedEvent.InputTuple,
    PlatformFeeUpdatedEvent.OutputTuple,
    PlatformFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "WhitelistToggled"
  ): TypedContractEvent<
    WhitelistToggledEvent.InputTuple,
    WhitelistToggledEvent.OutputTuple,
    WhitelistToggledEvent.OutputObject
  >;

  filters: {
    "AddressRegisteredInterest(address)": TypedContractEvent<
      AddressRegisteredInterestEvent.InputTuple,
      AddressRegisteredInterestEvent.OutputTuple,
      AddressRegisteredInterestEvent.OutputObject
    >;
    AddressRegisteredInterest: TypedContractEvent<
      AddressRegisteredInterestEvent.InputTuple,
      AddressRegisteredInterestEvent.OutputTuple,
      AddressRegisteredInterestEvent.OutputObject
    >;

    "AddressRemovedFromWhitelist(address)": TypedContractEvent<
      AddressRemovedFromWhitelistEvent.InputTuple,
      AddressRemovedFromWhitelistEvent.OutputTuple,
      AddressRemovedFromWhitelistEvent.OutputObject
    >;
    AddressRemovedFromWhitelist: TypedContractEvent<
      AddressRemovedFromWhitelistEvent.InputTuple,
      AddressRemovedFromWhitelistEvent.OutputTuple,
      AddressRemovedFromWhitelistEvent.OutputObject
    >;

    "AddressWhitelisted(address)": TypedContractEvent<
      AddressWhitelistedEvent.InputTuple,
      AddressWhitelistedEvent.OutputTuple,
      AddressWhitelistedEvent.OutputObject
    >;
    AddressWhitelisted: TypedContractEvent<
      AddressWhitelistedEvent.InputTuple,
      AddressWhitelistedEvent.OutputTuple,
      AddressWhitelistedEvent.OutputObject
    >;

    "AdminAdded(address,address)": TypedContractEvent<
      AdminAddedEvent.InputTuple,
      AdminAddedEvent.OutputTuple,
      AdminAddedEvent.OutputObject
    >;
    AdminAdded: TypedContractEvent<
      AdminAddedEvent.InputTuple,
      AdminAddedEvent.OutputTuple,
      AdminAddedEvent.OutputObject
    >;

    "AdminRemoved(address,address)": TypedContractEvent<
      AdminRemovedEvent.InputTuple,
      AdminRemovedEvent.OutputTuple,
      AdminRemovedEvent.OutputObject
    >;
    AdminRemoved: TypedContractEvent<
      AdminRemovedEvent.InputTuple,
      AdminRemovedEvent.OutputTuple,
      AdminRemovedEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "ArtistProfileUpdated(address,string,string,string)": TypedContractEvent<
      ArtistProfileUpdatedEvent.InputTuple,
      ArtistProfileUpdatedEvent.OutputTuple,
      ArtistProfileUpdatedEvent.OutputObject
    >;
    ArtistProfileUpdated: TypedContractEvent<
      ArtistProfileUpdatedEvent.InputTuple,
      ArtistProfileUpdatedEvent.OutputTuple,
      ArtistProfileUpdatedEvent.OutputObject
    >;

    "ArtworkMinted(uint256,uint256,address,address,uint256)": TypedContractEvent<
      ArtworkMintedEvent.InputTuple,
      ArtworkMintedEvent.OutputTuple,
      ArtworkMintedEvent.OutputObject
    >;
    ArtworkMinted: TypedContractEvent<
      ArtworkMintedEvent.InputTuple,
      ArtworkMintedEvent.OutputTuple,
      ArtworkMintedEvent.OutputObject
    >;

    "ArtworkSeriesCreated(uint256,address,string,uint256,uint256,uint256)": TypedContractEvent<
      ArtworkSeriesCreatedEvent.InputTuple,
      ArtworkSeriesCreatedEvent.OutputTuple,
      ArtworkSeriesCreatedEvent.OutputObject
    >;
    ArtworkSeriesCreated: TypedContractEvent<
      ArtworkSeriesCreatedEvent.InputTuple,
      ArtworkSeriesCreatedEvent.OutputTuple,
      ArtworkSeriesCreatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PlatformFeeUpdated(uint256,uint256)": TypedContractEvent<
      PlatformFeeUpdatedEvent.InputTuple,
      PlatformFeeUpdatedEvent.OutputTuple,
      PlatformFeeUpdatedEvent.OutputObject
    >;
    PlatformFeeUpdated: TypedContractEvent<
      PlatformFeeUpdatedEvent.InputTuple,
      PlatformFeeUpdatedEvent.OutputTuple,
      PlatformFeeUpdatedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "WhitelistToggled(bool,address)": TypedContractEvent<
      WhitelistToggledEvent.InputTuple,
      WhitelistToggledEvent.OutputTuple,
      WhitelistToggledEvent.OutputObject
    >;
    WhitelistToggled: TypedContractEvent<
      WhitelistToggledEvent.InputTuple,
      WhitelistToggledEvent.OutputTuple,
      WhitelistToggledEvent.OutputObject
    >;
  };
}
