/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface PermalinkMarketplaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_MARKETPLACE_FEE"
      | "acceptOffer"
      | "buyFromListing"
      | "cancelListing"
      | "cancelOffer"
      | "createListing"
      | "emergencyWithdraw"
      | "getListing"
      | "getOffer"
      | "getTokenListings"
      | "getTokenOffers"
      | "getUserListings"
      | "getUserOffers"
      | "listings"
      | "makeOffer"
      | "marketplaceFee"
      | "offers"
      | "onERC721Received"
      | "owner"
      | "pause"
      | "paused"
      | "permalinkContract"
      | "permalinkNFT"
      | "platformTreasury"
      | "renounceOwnership"
      | "setMarketplaceFee"
      | "tokenListings"
      | "tokenOffers"
      | "transferOwnership"
      | "unpause"
      | "userListings"
      | "userOffers"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Listed"
      | "OfferAccepted"
      | "OfferCancelled"
      | "OfferMade"
      | "OwnershipTransferred"
      | "Paused"
      | "Sale"
      | "Unlisted"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_MARKETPLACE_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOffer",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buyFromListing",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelListing",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOffer",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createListing",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getListing",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getOffer", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getTokenListings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenOffers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserListings",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserOffers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "listings", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "makeOffer",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "marketplaceFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "offers", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permalinkContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "permalinkNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketplaceFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenListings",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOffers",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userListings",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userOffers",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_MARKETPLACE_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyFromListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getListing", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "makeOffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketplaceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "offers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permalinkContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permalinkNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketplaceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userOffers", data: BytesLike): Result;
}

export namespace ListedEvent {
  export type InputTuple = [
    listingId: BytesLike,
    tokenId: BigNumberish,
    seller: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [
    listingId: string,
    tokenId: bigint,
    seller: string,
    price: bigint
  ];
  export interface OutputObject {
    listingId: string;
    tokenId: bigint;
    seller: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OfferAcceptedEvent {
  export type InputTuple = [
    offerId: BytesLike,
    tokenId: BigNumberish,
    seller: AddressLike,
    buyer: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [
    offerId: string,
    tokenId: bigint,
    seller: string,
    buyer: string,
    price: bigint
  ];
  export interface OutputObject {
    offerId: string;
    tokenId: bigint;
    seller: string;
    buyer: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OfferCancelledEvent {
  export type InputTuple = [offerId: BytesLike, buyer: AddressLike];
  export type OutputTuple = [offerId: string, buyer: string];
  export interface OutputObject {
    offerId: string;
    buyer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OfferMadeEvent {
  export type InputTuple = [
    offerId: BytesLike,
    tokenId: BigNumberish,
    buyer: AddressLike,
    price: BigNumberish,
    expiresAt: BigNumberish
  ];
  export type OutputTuple = [
    offerId: string,
    tokenId: bigint,
    buyer: string,
    price: bigint,
    expiresAt: bigint
  ];
  export interface OutputObject {
    offerId: string;
    tokenId: bigint;
    buyer: string;
    price: bigint;
    expiresAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SaleEvent {
  export type InputTuple = [
    listingId: BytesLike,
    tokenId: BigNumberish,
    seller: AddressLike,
    buyer: AddressLike,
    price: BigNumberish,
    artistRoyalty: BigNumberish,
    platformRoyalty: BigNumberish,
    marketplaceFee: BigNumberish
  ];
  export type OutputTuple = [
    listingId: string,
    tokenId: bigint,
    seller: string,
    buyer: string,
    price: bigint,
    artistRoyalty: bigint,
    platformRoyalty: bigint,
    marketplaceFee: bigint
  ];
  export interface OutputObject {
    listingId: string;
    tokenId: bigint;
    seller: string;
    buyer: string;
    price: bigint;
    artistRoyalty: bigint;
    platformRoyalty: bigint;
    marketplaceFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnlistedEvent {
  export type InputTuple = [listingId: BytesLike, seller: AddressLike];
  export type OutputTuple = [listingId: string, seller: string];
  export interface OutputObject {
    listingId: string;
    seller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PermalinkMarketplace extends BaseContract {
  connect(runner?: ContractRunner | null): PermalinkMarketplace;
  waitForDeployment(): Promise<this>;

  interface: PermalinkMarketplaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_MARKETPLACE_FEE: TypedContractMethod<[], [bigint], "view">;

  acceptOffer: TypedContractMethod<[offerId: BytesLike], [void], "nonpayable">;

  buyFromListing: TypedContractMethod<
    [listingId: BytesLike],
    [void],
    "payable"
  >;

  cancelListing: TypedContractMethod<
    [listingId: BytesLike],
    [void],
    "nonpayable"
  >;

  cancelOffer: TypedContractMethod<[offerId: BytesLike], [void], "nonpayable">;

  createListing: TypedContractMethod<
    [tokenId: BigNumberish, price: BigNumberish],
    [string],
    "nonpayable"
  >;

  emergencyWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  getListing: TypedContractMethod<
    [listingId: BytesLike],
    [
      [bigint, bigint, string, bigint, boolean] & {
        tokenId: bigint;
        price: bigint;
        seller: string;
        listedAt: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  getOffer: TypedContractMethod<
    [offerId: BytesLike],
    [
      [bigint, bigint, string, bigint, boolean] & {
        tokenId: bigint;
        price: bigint;
        buyer: string;
        expiresAt: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  getTokenListings: TypedContractMethod<
    [tokenId: BigNumberish],
    [string[]],
    "view"
  >;

  getTokenOffers: TypedContractMethod<
    [tokenId: BigNumberish],
    [string[]],
    "view"
  >;

  getUserListings: TypedContractMethod<[user: AddressLike], [string[]], "view">;

  getUserOffers: TypedContractMethod<[user: AddressLike], [string[]], "view">;

  listings: TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, bigint, string, bigint, boolean] & {
        tokenId: bigint;
        price: bigint;
        seller: string;
        listedAt: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  makeOffer: TypedContractMethod<
    [tokenId: BigNumberish, duration: BigNumberish],
    [string],
    "payable"
  >;

  marketplaceFee: TypedContractMethod<[], [bigint], "view">;

  offers: TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, bigint, string, bigint, boolean] & {
        tokenId: bigint;
        price: bigint;
        buyer: string;
        expiresAt: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  permalinkContract: TypedContractMethod<[], [string], "view">;

  permalinkNFT: TypedContractMethod<[], [string], "view">;

  platformTreasury: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setMarketplaceFee: TypedContractMethod<
    [_fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  tokenListings: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  tokenOffers: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  userListings: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  userOffers: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_MARKETPLACE_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "acceptOffer"
  ): TypedContractMethod<[offerId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "buyFromListing"
  ): TypedContractMethod<[listingId: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "cancelListing"
  ): TypedContractMethod<[listingId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelOffer"
  ): TypedContractMethod<[offerId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createListing"
  ): TypedContractMethod<
    [tokenId: BigNumberish, price: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getListing"
  ): TypedContractMethod<
    [listingId: BytesLike],
    [
      [bigint, bigint, string, bigint, boolean] & {
        tokenId: bigint;
        price: bigint;
        seller: string;
        listedAt: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOffer"
  ): TypedContractMethod<
    [offerId: BytesLike],
    [
      [bigint, bigint, string, bigint, boolean] & {
        tokenId: bigint;
        price: bigint;
        buyer: string;
        expiresAt: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenListings"
  ): TypedContractMethod<[tokenId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTokenOffers"
  ): TypedContractMethod<[tokenId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getUserListings"
  ): TypedContractMethod<[user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getUserOffers"
  ): TypedContractMethod<[user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "listings"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, bigint, string, bigint, boolean] & {
        tokenId: bigint;
        price: bigint;
        seller: string;
        listedAt: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "makeOffer"
  ): TypedContractMethod<
    [tokenId: BigNumberish, duration: BigNumberish],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "marketplaceFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "offers"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, bigint, string, bigint, boolean] & {
        tokenId: bigint;
        price: bigint;
        buyer: string;
        expiresAt: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "permalinkContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "permalinkNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "platformTreasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMarketplaceFee"
  ): TypedContractMethod<[_fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tokenListings"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenOffers"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userListings"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "userOffers"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getEvent(
    key: "Listed"
  ): TypedContractEvent<
    ListedEvent.InputTuple,
    ListedEvent.OutputTuple,
    ListedEvent.OutputObject
  >;
  getEvent(
    key: "OfferAccepted"
  ): TypedContractEvent<
    OfferAcceptedEvent.InputTuple,
    OfferAcceptedEvent.OutputTuple,
    OfferAcceptedEvent.OutputObject
  >;
  getEvent(
    key: "OfferCancelled"
  ): TypedContractEvent<
    OfferCancelledEvent.InputTuple,
    OfferCancelledEvent.OutputTuple,
    OfferCancelledEvent.OutputObject
  >;
  getEvent(
    key: "OfferMade"
  ): TypedContractEvent<
    OfferMadeEvent.InputTuple,
    OfferMadeEvent.OutputTuple,
    OfferMadeEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Sale"
  ): TypedContractEvent<
    SaleEvent.InputTuple,
    SaleEvent.OutputTuple,
    SaleEvent.OutputObject
  >;
  getEvent(
    key: "Unlisted"
  ): TypedContractEvent<
    UnlistedEvent.InputTuple,
    UnlistedEvent.OutputTuple,
    UnlistedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "Listed(bytes32,uint256,address,uint256)": TypedContractEvent<
      ListedEvent.InputTuple,
      ListedEvent.OutputTuple,
      ListedEvent.OutputObject
    >;
    Listed: TypedContractEvent<
      ListedEvent.InputTuple,
      ListedEvent.OutputTuple,
      ListedEvent.OutputObject
    >;

    "OfferAccepted(bytes32,uint256,address,address,uint256)": TypedContractEvent<
      OfferAcceptedEvent.InputTuple,
      OfferAcceptedEvent.OutputTuple,
      OfferAcceptedEvent.OutputObject
    >;
    OfferAccepted: TypedContractEvent<
      OfferAcceptedEvent.InputTuple,
      OfferAcceptedEvent.OutputTuple,
      OfferAcceptedEvent.OutputObject
    >;

    "OfferCancelled(bytes32,address)": TypedContractEvent<
      OfferCancelledEvent.InputTuple,
      OfferCancelledEvent.OutputTuple,
      OfferCancelledEvent.OutputObject
    >;
    OfferCancelled: TypedContractEvent<
      OfferCancelledEvent.InputTuple,
      OfferCancelledEvent.OutputTuple,
      OfferCancelledEvent.OutputObject
    >;

    "OfferMade(bytes32,uint256,address,uint256,uint256)": TypedContractEvent<
      OfferMadeEvent.InputTuple,
      OfferMadeEvent.OutputTuple,
      OfferMadeEvent.OutputObject
    >;
    OfferMade: TypedContractEvent<
      OfferMadeEvent.InputTuple,
      OfferMadeEvent.OutputTuple,
      OfferMadeEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Sale(bytes32,uint256,address,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      SaleEvent.InputTuple,
      SaleEvent.OutputTuple,
      SaleEvent.OutputObject
    >;
    Sale: TypedContractEvent<
      SaleEvent.InputTuple,
      SaleEvent.OutputTuple,
      SaleEvent.OutputObject
    >;

    "Unlisted(bytes32,address)": TypedContractEvent<
      UnlistedEvent.InputTuple,
      UnlistedEvent.OutputTuple,
      UnlistedEvent.OutputObject
    >;
    Unlisted: TypedContractEvent<
      UnlistedEvent.InputTuple,
      UnlistedEvent.OutputTuple,
      UnlistedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
